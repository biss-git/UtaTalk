using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace UtaTalkEngine
{
    static class MoraUtility
    {
        public static readonly Dictionary<string, string> MoraDict = new Dictionary<string, string>
        {
            { "ア" , "a" }, { "イ" , "i" }, { "ウ" , "u" }, { "エ" , "e" }, { "オ" , "o" },
            { "カ" , "a" }, { "キ" , "i" }, { "ク" , "u" }, { "ケ" , "e" }, { "コ" , "o" },
            { "サ" , "a" }, { "シ" , "i" }, { "ス" , "u" }, { "セ" , "e" }, { "ソ" , "o" },
            { "タ" , "a" }, { "チ" , "i" }, { "ツ" , "u" }, { "テ" , "e" }, { "ト" , "o" },
            { "ナ" , "a" }, { "ニ" , "i" }, { "ヌ" , "u" }, { "ネ" , "e" }, { "ノ" , "o" },
            { "ハ" , "a" }, { "ヒ" , "i" }, { "フ" , "u" }, { "ヘ" , "e" }, { "ホ" , "o" },
            { "マ" , "a" }, { "ミ" , "i" }, { "ム" , "u" }, { "メ" , "e" }, { "モ" , "o" },
            { "ヤ" , "a" }, { "ユ" , "u" }, { "ヨ" , "o" },
            { "ラ" , "a" }, { "リ" , "i" }, { "ル" , "u" }, { "レ" , "e" }, { "ロ" , "o" },
            { "ワ" , "a" }, { "ヲ" , "o" }, { "ン" , "n" },
            { "ヴ" , "u" },
            { "ガ" , "a" }, { "ギ" , "i" }, { "グ" , "u" }, { "ゲ" , "e" }, { "ゴ" , "o" },
            { "ザ" , "a" }, { "ジ" , "i" }, { "ズ" , "u" }, { "ゼ" , "e" }, { "ゾ" , "o" },
            { "ダ" , "a" }, { "ヂ" , "i" }, { "ヅ" , "u" }, { "デ" , "e" }, { "ド" , "o" },
            { "バ" , "a" }, { "ビ" , "i" }, { "ブ" , "u" }, { "ベ" , "e" }, { "ボ" , "o" },
            { "パ" , "a" }, { "ピ" , "i" }, { "プ" , "u" }, { "ペ" , "e" }, { "ポ" , "o" },
            { "ァ" , "a" }, { "ィ" , "i" }, { "ゥ" , "u" }, { "ェ" , "e" }, { "ォ" , "o" },
            { "ャ" , "a" }, { "ュ" , "u" }, { "ョ" , "o" },
        };

        public static string[] SpecialChar = new string[]
        {
            "ー", "ッ"
        };

        public static string GetVowel(string lastChar)
        {
            var vowel = "-";
            if (string.IsNullOrWhiteSpace(lastChar)) { return vowel; }
            if (MoraUtility.MoraDict.ContainsKey(lastChar.Substring(lastChar.Length - 1)))
            {
                vowel = MoraUtility.MoraDict[lastChar.Substring(lastChar.Length - 1)];
            }
            return vowel;
        }

        // 単音での速度 [ms] A.I.VOICE 琴葉茜の計測値
        private static readonly Dictionary<string, int> MoraSpan = new Dictionary<string, int>
        {
            { "ア" , 209 }, { "イ" , 188 }, { "ウ" , 164 }, { "エ" , 189 }, { "オ" , 162 },
            { "カ" , 219 }, { "キ" , 213 }, { "ク" , 203 }, { "ケ" , 221 }, { "コ" , 182 },
            { "サ" , 290 }, { "シ" , 307 }, { "ス" , 268 }, { "セ" , 279 }, { "ソ" , 274 },
            { "タ" , 176 }, { "チ" , 192 }, { "ツ" , 256 }, { "テ" , 185 }, { "ト" , 161 },
            { "ナ" , 247 }, { "ニ" , 224 }, { "ヌ" , 206 }, { "ネ" , 257 }, { "ノ" , 185 },
            { "ハ" , 201 }, { "ヒ" , 233 }, { "フ" , 209 }, { "ヘ" , 189 }, { "ホ" , 213 },
            { "マ" , 232 }, { "ミ" , 264 }, { "ム" , 228 }, { "メ" , 236 }, { "モ" , 234 },
            { "ヤ" , 211 }, { "ユ" , 254 }, { "ヨ" , 216 },
            { "ラ" , 224 }, { "リ" , 161 }, { "ル" , 179 }, { "レ" , 201 }, { "ロ" , 204 },
            { "ワ" , 202 }, { "ヲ" , 162 }, { "ン" , 159 },
            { "ヴ" , 247 },
            { "ガ" , 270 }, { "ギ" , 240 }, { "グ" , 237 }, { "ゲ" , 269 }, { "ゴ" , 244 },
            { "ザ" , 267 }, { "ジ" , 278 }, { "ズ" , 239 }, { "ゼ" , 264 }, { "ゾ" , 270 },
            { "ダ" , 256 }, { "ヂ" , 281 }, { "ヅ" , 239 }, { "デ" , 231 }, { "ド" , 260 },
            { "バ" , 291 }, { "ビ" , 251 }, { "ブ" , 265 }, { "ベ" , 273 }, { "ボ" , 262 },
            { "パ" , 201 }, { "ピ" , 192 }, { "プ" , 172 }, { "ペ" , 179 }, { "ポ" , 182 },
            { "ァ" , 214 }, { "ィ" , 194 }, { "ゥ" , 167 }, { "ェ" , 190 }, { "ォ" , 164 },
            { "ャ" , 219 }, { "ュ" , 254 }, { "ョ" , 227 },

            { "イェ" , 268 },
            { "ウィ" , 222 }, { "ウェ" , 217 }, { "ウォ" , 217 },
            { "キェ" , 250 }, { "キャ" , 224 }, { "キュ" , 258 }, { "キョ" , 234 },
            { "クァ" , 360 }, { "クィ" , 332 }, { "クェ" , 347 }, { "クォ" , 333 },
            { "シェ" , 303 }, { "シャ" , 245 }, { "シュ" , 298 }, { "ショ" , 262 },
            { "スァ" , 454 }, { "スィ" , 436 }, { "スェ" , 435 }, { "スォ" , 405 },
            { "チェ" , 227 }, { "チャ" , 222 }, { "チュ" , 247 }, { "チョ" , 229 },
            { "ツァ" , 263 }, { "ツィ" , 259 }, { "ツェ" , 218 }, { "ツォ" , 237 },
            { "ティ" , 199 }, { "テャ" , 405 }, { "テュ" , 211 }, { "テョ" , 453 },
            { "トゥ" , 182},
            { "ニェ" , 306 }, { "ニャ" , 256 }, { "ニュ" , 255 }, { "ニョ" , 242 },
            { "ヌァ" , 392 }, { "ヌィ" , 381 }, { "ヌェ" , 373 }, { "ヌォ" , 360 },
            { "ヒェ" , 256 }, { "ヒャ" , 198 }, { "ヒュ" , 278 }, { "ヒョ" , 264 },
            { "ファ" , 248 }, { "フィ" , 210 }, { "フェ" , 235 }, { "フォ" , 214 }, { "フャ" , 261 }, { "フュ" , 224 }, { "フョ" , 218},
            { "ミェ" , 336 }, { "ミャ" , 324 }, { "ミュ" , 271 }, { "ミョ" , 345 },
            { "ムァ" , 404 }, { "ムィ" , 381 }, { "ムェ" , 373 }, { "ムォ" , 364 },
            { "リェ" , 256 }, { "リャ" , 228 }, { "リュ" , 246 }, { "リョ" , 225 },
            { "ルァ" , 373 }, { "ルィ" , 356 }, { "ルェ" , 342 }, { "ルォ" , 328 },
            { "ヴァ" , 261 }, { "ヴィ" , 234 }, { "ヴェ" , 247 }, { "ヴォ" , 232 }, { "ヴャ" , 268 }, { "ヴュ" , 253 }, { "ヴョ" , 246 },
            { "ギェ" , 292 }, { "ギャ" , 270 }, { "ギュ" , 292 }, { "ギョ" , 278 },
            { "グァ" , 408 }, { "グィ" , 418 }, { "グェ" , 373 }, { "グォ" , 390 },
            { "ジェ" , 275 }, { "ジャ" , 235 }, { "ジュ" , 255 }, { "ジョ" , 233 },
            { "ズァ" , 229 }, { "ズィ" , 249 }, { "ズェ" , 267 }, { "ズォ" , 271 },
            { "ディ" , 227 }, { "デャ" , 442 }, { "デュ" , 286 }, { "デョ" , 488 },
            { "ドゥ" , 273 },
            { "ビェ" , 406 }, { "ビャ" , 283 }, { "ビュ" , 303 }, { "ビョ" , 285 },
            { "ブァ" , 455 }, { "ブィ" , 438 }, { "ブェ" , 431 }, { "ブォ" , 413 },
            { "ピェ" , 346 }, { "ピャ" , 207 }, { "ピュ" , 203 }, { "ピョ" , 201 },
            { "プァ" , 368 }, { "プィ" , 327 }, { "プェ" , 329 }, { "プォ" , 288 },
        };

        private static string[] keys;

        static MoraUtility()
        {
            keys = MoraSpan.Keys.OrderBy(m => -m.Length).ToArray();
        }

        public static int GetMoraSpan_ms(string key)
        {
            foreach (var k in keys)
            {
                if (key.Contains(k))
                {
                    var span = MoraSpan[k];
                    var rate = Math.Sqrt(span / 200.0);
                    return (int)Math.Round(200 * rate);
                }
            }
            return 200;
        }
    }
}
